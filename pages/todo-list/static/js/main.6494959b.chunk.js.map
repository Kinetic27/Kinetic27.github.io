{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","palette","children","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","checked","text","id","onToggle","onRemove","color","e","stopPropagation","style","Component","TodoItemList","todos","todoList","map","key","Color","active","background","Palette","colors","selected","onSelect","colorList","App","state","input","handleChange","setState","target","handleCreate","trim","concat","handleKeyPress","handleToggle","index","findIndex","todo","nextTodos","handleRemove","filter","handleSelectColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAsBeA,G,MAnBU,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACxC,OACE,0BAAMC,UAAU,sBACZ,yBAAKA,UAAU,SAAf,8BAGA,6BAASA,UAAU,mBACdF,GAEL,6BAASE,UAAU,gBACdH,GAEP,6BAASG,UAAU,iBACfD,MCFKE,G,MAXF,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WACxC,OACE,yBAAKL,UAAU,QACb,2BAAOE,MAAOA,EAAOC,SAAUA,EAAUE,WAAYA,IACrD,yBAAKL,UAAU,gBAAgBM,QAASF,GAAxC,mBCmBSG,G,0LArBWC,EAAWC,GAC7B,OAAOC,KAAKC,MAAMC,UAAYJ,EAAUI,U,+BAGlC,IAAD,EACkDF,KAAKC,MAArDE,EADF,EACEA,KAAMD,EADR,EACQA,QAASE,EADjB,EACiBA,GAAIC,EADrB,EACqBA,SAAUC,EAD/B,EAC+BA,SAAUC,EADzC,EACyCA,MAE9C,OAAQ,yBAAKjB,UAAU,YAAYM,QAAS,kBAAMS,EAASD,KACvD,yBAAKd,UAAU,SAASM,QAAS,SAACY,GAC9BA,EAAEC,kBACFH,EAASF,KAFb,QAKA,yBAAKM,MAAO,CAACH,SAAQjB,UAAS,oBAAeY,GAAW,YACpD,6BAAMC,IAETD,GAAY,yBAAKZ,UAAU,cAAf,e,GAlBFqB,cCgBRC,E,oLAdWd,EAAWC,GAC7B,OAAOC,KAAKC,MAAMY,QAAUf,EAAUe,Q,+BAGhC,IAAD,EAC+Bb,KAAKC,MAAlCY,EADF,EACEA,MAAOR,EADT,EACSA,SAAUC,EADnB,EACmBA,SAClBQ,EAAWD,EAAME,KAAI,gBAAEX,EAAF,EAAEA,GAAID,EAAN,EAAMA,KAAMD,EAAZ,EAAYA,QAASK,EAArB,EAAqBA,MAArB,OAAiC,kBAAC,EAAD,CAAUH,GAAIA,EAAID,KAAMA,EAAMI,MAAOA,EAAOL,QAASA,EAASG,SAAUA,EAAUC,SAAUA,EAAUU,IAAKZ,OAEvK,OAAQ,6BACHU,O,GAXcH,aCArBM,G,MAAQ,SAAC,GAA8B,IAA7BV,EAA4B,EAA5BA,MAAOW,EAAqB,EAArBA,OAAQtB,EAAa,EAAbA,QAC3B,OAAQ,yBAAKN,UAAS,gBAAW4B,GAAU,UAAYR,MAAO,CACtDS,WAAYZ,GACbX,QAASA,MAWLwB,EARC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAC1BC,EAAYH,EAAON,KAAI,SAACR,GAAD,OAAY,kBAAC,EAAD,CAAOA,MAAOA,EAAOW,OAAQI,IAAaf,EAAOX,QAAS,kBAAM2B,EAAShB,IAAQS,IAAKT,OAE/H,OAAQ,yBAAKjB,UAAU,WAClBkC,ICPHH,EAAS,CAAC,UAAW,UAAW,UAAW,WAwGlCI,E,4MApGXrB,IAAM,E,EAENsB,MAAQ,CACJC,MAAO,GACPd,MAAO,GACPN,MAAO,W,EAGXqB,aAAe,SAACpB,GACZ,EAAKqB,SAAS,CACVF,MAAOnB,EAAEsB,OAAOtC,S,EAIxBuC,aAAe,WAAO,IAAD,EACa,EAAKL,MAA5BC,EADU,EACVA,MAAOd,EADG,EACHA,MAAON,EADJ,EACIA,MAED,KAAjBoB,EAAMK,QACL,EAAKH,SAAS,CACVF,MAAO,GAEPd,MAAOA,EAAMoB,OAAO,CAChB7B,GAAI,EAAKA,KACTD,KAAMwB,EACNzB,SAAS,EACTK,a,EAMhB2B,eAAiB,SAAC1B,GAEA,UAAVA,EAAEQ,KACF,EAAKe,gB,EAIbI,aAAe,SAAC/B,GAAQ,IACbS,EAAS,EAAKa,MAAdb,MAGDuB,EAAQvB,EAAMwB,WAAU,SAAAC,GAAI,OAAIA,EAAKlC,KAAOA,KAC5CkB,EAAWT,EAAMuB,GAEjBG,EAAS,YAAO1B,GAGtB0B,EAAUH,GAAV,2BACOd,GADP,IAEIpB,SAAUoB,EAASpB,UAGvB,EAAK2B,SAAS,CAAChB,MAAO0B,K,EAG1BC,aAAe,SAACpC,GAAQ,IACbS,EAAS,EAAKa,MAAdb,MACP,EAAKgB,SAAS,CACVhB,MAAOA,EAAM4B,QAAO,SAAAH,GAAI,OAAIA,EAAKlC,KAAOA,Q,EAIhDsC,kBAAoB,SAACnC,GACjB,EAAKsB,SAAS,CAACtB,W,uDAGT,IAAD,EACyBP,KAAK0B,MAA5BC,EADF,EACEA,MAAOd,EADT,EACSA,MAAON,EADhB,EACgBA,MAEjBqB,EAMA5B,KANA4B,aACAG,EAKA/B,KALA+B,aACAG,EAIAlC,KAJAkC,eACAC,EAGAnC,KAHAmC,aACAK,EAEAxC,KAFAwC,aACAE,EACA1C,KADA0C,kBAGJ,OAAQ,kBAAC,EAAD,CACJvD,KACI,kBAAC,EAAD,CACIK,MAAOmC,EACPhC,WAAYuC,EACZzC,SAAUmC,EACVlC,SAAUqC,EACVxB,MAAOA,IAGfnB,QACI,kBAAC,EAAD,CACIiC,OAAQA,EACRC,SAAUf,EACVgB,SAAUmB,KAGlB,kBAAC,EAAD,CAAc7B,MAAOA,EAAOR,SAAU8B,EAAc7B,SAAUkC,S,GAjGxD7B,aCIEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6494959b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, palette, children}) => {\r\n  return (\r\n    <main className=\"todo-list-template\">\r\n        <div className=\"title\">\r\n            오늘 할 일\r\n        </div>\r\n        <section className=\"palette-wrapper\">\r\n            {palette}\r\n        </section>\r\n        <section className=\"form-wrapper\">\r\n            {form}\r\n      </section>\r\n      <section className=\"todos-wrapper\">\r\n        { children }\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoListTemplate;\r\n","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const {text, checked, id, onToggle, onRemove, color} = this.props;\r\n\r\n        return (<div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n            <div className=\"remove\" onClick={(e) => {\r\n                e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n                onRemove(id)\r\n            }\r\n            }>&times;</div>\r\n            <div style={{color}} className={`todo-text ${checked && 'checked'}`}>\r\n                <div>{text}</div>\r\n            </div>\r\n            {checked && (<div className=\"check-mark\">✓</div>)}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render() {\r\n        const {todos, onToggle, onRemove} = this.props;\r\n        const todoList = todos.map(({id, text, checked, color}) => (<TodoItem id={id} text={text} color={color} checked={checked} onToggle={onToggle} onRemove={onRemove} key={id}/>));\r\n\r\n        return (<div>\r\n            {todoList}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default TodoItemList;\r\n","import React from 'react';\r\nimport './Palette.css';\r\n\r\nconst Color = ({color, active, onClick}) => {\r\n    return (<div className={`color ${active && 'active'}`} style={{\r\n            background: color\r\n        }} onClick={onClick}></div>)\r\n}\r\n\r\nconst Palette = ({colors, selected, onSelect}) => {\r\n    const colorList = colors.map((color) => (<Color color={color} active={selected === color} onClick={() => onSelect(color)} key={color}/>));\r\n\r\n    return (<div className=\"palette\">\r\n        {colorList}\r\n    </div>);\r\n};\r\n\r\nexport default Palette;\r\n","import React, {Component} from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\nimport Palette from './components/Palette';\r\n\r\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\r\n\r\nclass App extends Component {\r\n\r\n    id = -1// 이미 0,1,2 가 존재하므로 3으로 설정\r\n\r\n    state = {\r\n        input: '',\r\n        todos: [],\r\n        color: '#343a40'\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            input: e.target.value // input 의 다음 바뀔 값\r\n        });\r\n    }\r\n\r\n    handleCreate = () => {\r\n        const {input, todos, color} = this.state;\r\n\r\n        if(input.trim() !== \"\") {\r\n            this.setState({\r\n                input: '', // 인풋 비우고\r\n                // concat 을 사용하여 배열에 추가\r\n                todos: todos.concat({\r\n                    id: this.id++,\r\n                    text: input,\r\n                    checked: false,\r\n                    color\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        // 눌려진 키가 Enter 면 handleCreate 호출\r\n        if (e.key === 'Enter') {\r\n            this.handleCreate();\r\n        }\r\n    }\r\n\r\n    handleToggle = (id) => {\r\n        const {todos} = this.state;\r\n\r\n        // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\r\n        const index = todos.findIndex(todo => todo.id === id);\r\n        const selected = todos[index]; // 선택한 객체\r\n\r\n        const nextTodos = [...todos]; // 배열을 복사\r\n\r\n        // 기존의 값들을 복사하고, checked 값을 덮어쓰기\r\n        nextTodos[index] = {\r\n            ...selected,\r\n            checked: !selected.checked\r\n        };\r\n\r\n        this.setState({todos: nextTodos});\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const {todos} = this.state;\r\n        this.setState({\r\n            todos: todos.filter(todo => todo.id !== id)\r\n        });\r\n    }\r\n\r\n    handleSelectColor = (color) => {\r\n        this.setState({color})\r\n    }\r\n\r\n    render() {\r\n        const {input, todos, color} = this.state;\r\n        const {\r\n            handleChange,\r\n            handleCreate,\r\n            handleKeyPress,\r\n            handleToggle,\r\n            handleRemove,\r\n            handleSelectColor\r\n        } = this;\r\n\r\n        return (<TodoListTemplate\r\n            form={(\r\n                <Form\r\n                    value={input}\r\n                    onKeyPress={handleKeyPress}\r\n                    onChange={handleChange}\r\n                    onCreate={handleCreate}\r\n                    color={color}\r\n                />\r\n            )}\r\n            palette={(\r\n                <Palette\r\n                    colors={colors}\r\n                    selected={color}\r\n                    onSelect={handleSelectColor}\r\n                />\r\n            )}>\r\n            <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\r\n        </TodoListTemplate>);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}